{"ast":null,"code":"var _jsxFileName = \"D:\\\\ecommerce\\\\src\\\\pages\\\\Shop\\\\RangeSlider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport classnames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RangeSlider = _ref => {\n  _s();\n\n  let {\n    min,\n    max,\n    onChange\n  } = _ref;\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(null);\n  const maxValRef = useRef(null);\n  const range = useRef(null); // Convert to percentage\n\n  const getPercent = useCallback(value => Math.round((value - min) / (max - min) * 100), [min, max]); // Set width of the range to decrease from the left side\n\n  useEffect(() => {\n    if (maxValRef.current) {\n      const minPercent = getPercent(minVal);\n      const maxPercent = getPercent(+maxValRef.current.value); // Preceding with '+' converts the value from type string to type number\n\n      if (range.current) {\n        range.current.style.left = `${minPercent}%`;\n        range.current.style.width = `${maxPercent - minPercent}%`;\n      }\n    }\n  }, [minVal, getPercent]); // Set width of the range to decrease from the right side\n\n  useEffect(() => {\n    if (minValRef.current) {\n      const minPercent = getPercent(+minValRef.current.value);\n      const maxPercent = getPercent(maxVal);\n\n      if (range.current) {\n        range.current.style.width = `${maxPercent - minPercent}%`;\n      }\n    }\n  }, [maxVal, getPercent]); // Get min and max values when their state changes\n\n  useEffect(() => {\n    onChange({\n      min: minVal,\n      max: maxVal\n    });\n  }, [minVal, maxVal, onChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-8 text-lg md:text-2xl\",\n      children: [\"$ \", /*#__PURE__*/_jsxDEV(\"span\", {\n        onChange: e => setMinValue(e.target.value),\n        children: minVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), \" - $ \", /*#__PURE__*/_jsxDEV(\"span\", {\n        onChange: e => setMaxValue(e.target.value),\n        children: maxVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: minVal,\n      ref: minValRef,\n      onChange: event => {\n        const value = Math.min(+event.target.value, maxVal - 1);\n        setMinVal(value);\n        event.target.value = value.toString();\n      },\n      className: classnames(\"thumb thumb--zindex-3\", {\n        \"thumb--zindex-5\": minVal > max - 100\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: maxVal,\n      ref: maxValRef,\n      onChange: event => {\n        const value = Math.max(+event.target.value, minVal + 1);\n        setMaxVal(value);\n        event.target.value = value.toString();\n      },\n      className: \"thumb thumb--zindex-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__track\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: range,\n        className: \"slider__range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RangeSlider, \"joEa1v1zaOhKGQUDNY+uJuhJ5cU=\");\n\n_c = RangeSlider;\nexport default RangeSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"RangeSlider\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","useRef","classnames","RangeSlider","min","max","onChange","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","range","getPercent","value","Math","round","current","minPercent","maxPercent","style","left","width","e","setMinValue","target","setMaxValue","event","toString"],"sources":["D:/ecommerce/src/pages/Shop/RangeSlider.js"],"sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\r\nimport classnames from \"classnames\";\r\n\r\nconst RangeSlider = ({ min, max, onChange }) => {\r\n  const [minVal, setMinVal] = useState(min);\r\n  const [maxVal, setMaxVal] = useState(max);\r\n  const minValRef = useRef(null);\r\n  const maxValRef = useRef(null);\r\n  const range = useRef(null);\r\n\r\n  // Convert to percentage\r\n  const getPercent = useCallback(\r\n    (value) => Math.round(((value - min) / (max - min)) * 100),\r\n    [min, max]\r\n  );\r\n\r\n  // Set width of the range to decrease from the left side\r\n  useEffect(() => {\r\n    if (maxValRef.current) {\r\n      const minPercent = getPercent(minVal);\r\n      const maxPercent = getPercent(+maxValRef.current.value); // Preceding with '+' converts the value from type string to type number\r\n\r\n      if (range.current) {\r\n        range.current.style.left = `${minPercent}%`;\r\n        range.current.style.width = `${maxPercent - minPercent}%`;\r\n      }\r\n    }\r\n  }, [minVal, getPercent]);\r\n\r\n  // Set width of the range to decrease from the right side\r\n  useEffect(() => {\r\n    if (minValRef.current) {\r\n      const minPercent = getPercent(+minValRef.current.value);\r\n      const maxPercent = getPercent(maxVal);\r\n\r\n      if (range.current) {\r\n        range.current.style.width = `${maxPercent - minPercent}%`;\r\n      }\r\n    }\r\n  }, [maxVal, getPercent]);\r\n\r\n  // Get min and max values when their state changes\r\n  useEffect(() => {\r\n    onChange({ min: minVal, max: maxVal });\r\n  }, [minVal, maxVal, onChange]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"mb-8 text-lg md:text-2xl\">\r\n        $ <span onChange={(e) => setMinValue(e.target.value)}>{minVal}</span> -\r\n        $ <span onChange={(e) => setMaxValue(e.target.value)}>{maxVal}</span>\r\n      </h1>\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={minVal}\r\n        ref={minValRef}\r\n        onChange={(event) => {\r\n          const value = Math.min(+event.target.value, maxVal - 1);\r\n          setMinVal(value);\r\n          event.target.value = value.toString();\r\n        }}\r\n        className={classnames(\"thumb thumb--zindex-3\", {\r\n          \"thumb--zindex-5\": minVal > max - 100,\r\n        })}\r\n      />\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={maxVal}\r\n        ref={maxValRef}\r\n        onChange={(event) => {\r\n          const value = Math.max(+event.target.value, minVal + 1);\r\n          setMaxVal(value);\r\n          event.target.value = value.toString();\r\n        }}\r\n        className=\"thumb thumb--zindex-4\"\r\n      />\r\n\r\n      <div className=\"slider\">\r\n        <div className=\"slider__track\" />\r\n        <div ref={range} className=\"slider__range\" />\r\n        {/* <div className=\"slider__left-value\">{minVal}</div>\r\n        <div className=\"slider__right-value\">{maxVal}</div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RangeSlider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}